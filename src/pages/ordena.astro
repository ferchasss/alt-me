---
import Layout from '../layouts/Layout.astro';

// Aquí puedes cambiar los textos que quieres mostrar
const textos = [
    { texto: "En lo profundo...", orden: 1 },
    { texto: "no hay sombra", orden: 2 },
    { texto: "hay semilla", orden: 3 }
];

// Clases comunes para los elementos
const baseClasses = "texto-elemento text-[#CCFF00] cursor-grab text-xl md:text-2xl lg:text-3xl font-light tracking-wide absolute select-none font-sans transition-all duration-300";
const buttonClasses = "bg-[#CCFF00] text-black px-8 py-4 rounded-lg cursor-pointer text-xl md:text-2xl lg:text-3xl font-light tracking-wide hover:bg-[#b3e600] hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl font-sans";
const indicatorClasses = "border-2 border-[#CCFF00] border-dashed rounded-lg absolute transition-all duration-300";
---

<Layout title="Ordena">
    <section class="w-full h-screen bg-black relative overflow-hidden font-sans">
        <div class="textos-container font-sans">
            {textos.map((item) => (
                <div 
                    class={baseClasses}
                    draggable="true"
                    data-order={item.orden}>
                    {item.texto}
                </div>
            ))}
            <!-- Indicadores de posición -->
            <div id="indicadores" class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex flex-col gap-8 font-sans">
                {textos.map((_, index) => (
                    <div 
                        class={`${indicatorClasses} w-[400px] h-[80px] flex items-center justify-center`}
                        style={`top: ${index * 120}px;`}
                        data-slot={index + 1}>
                    </div>
                ))}
            </div>
        </div>
    </section>

    <script define:vars={{ buttonClasses, textos }}>
        window.onload = function() {
            // Posicionar elementos aleatoriamente al inicio
            const elementos = document.querySelectorAll('.texto-elemento');
            elementos.forEach(elemento => {
                const x = Math.random() * (window.innerWidth - 200);
                const y = Math.random() * (window.innerHeight - 100);
                elemento.style.left = `${x}px`;
                elemento.style.top = `${y}px`;
            });

            let draggedItem = null;

            elementos.forEach(texto => {
                texto.addEventListener('mousedown', () => {
                    texto.style.cursor = 'grabbing';
                });

                texto.addEventListener('mouseup', () => {
                    texto.style.cursor = 'grab';
                });

                texto.addEventListener('mouseleave', () => {
                    texto.style.cursor = 'grab';
                });

                texto.addEventListener('dragstart', () => {
                    draggedItem = texto;
                    texto.classList.add('scale-110', 'opacity-50', 'z-50');
                    texto.style.cursor = 'grabbing';
                });

                texto.addEventListener('dragend', () => {
                    texto.classList.remove('scale-110', 'opacity-50', 'z-50');
                    texto.style.cursor = 'grab';

                    // Obtener el orden del elemento
                    const order = parseInt(texto.getAttribute('data-order'));
                    
                    // Obtener el rectángulo correspondiente
                    const slot = document.querySelector(`[data-slot="${order}"]`);
                    if (slot) {
                        const slotRect = slot.getBoundingClientRect();
                        const textoRect = texto.getBoundingClientRect();
                        
                        // Calcular la distancia entre el centro del texto y el centro del slot
                        const textoCenterX = textoRect.left + textoRect.width / 2;
                        const textoCenterY = textoRect.top + textoRect.height / 2;
                        const slotCenterX = slotRect.left + slotRect.width / 2;
                        const slotCenterY = slotRect.top + slotRect.height / 2;
                        
                        // Si está cerca del slot, pegarlo
                        if (Math.abs(textoCenterX - slotCenterX) < 200 && 
                            Math.abs(textoCenterY - slotCenterY) < 200) {
                            texto.style.left = `${slotRect.left + (slotRect.width - textoRect.width) / 2}px`;
                            texto.style.top = `${slotRect.top + (slotRect.height - textoRect.height) / 2}px`;
                        }
                    }
                    
                    draggedItem = null;
                    checkOrder();
                });
            });

            function checkOrder() {
                const slots = document.querySelectorAll('[data-slot]');
                let allInPlace = true;
                let correctOrder = true;

                elementos.forEach((elemento, index) => {
                    const order = parseInt(elemento.getAttribute('data-order'));
                    const slot = slots[order - 1];
                    const elementoRect = elemento.getBoundingClientRect();
                    const slotRect = slot.getBoundingClientRect();

                    // Verificar si está en su lugar
                    const elementoCenterX = elementoRect.left + elementoRect.width / 2;
                    const elementoCenterY = elementoRect.top + elementoRect.height / 2;
                    const slotCenterX = slotRect.left + slotRect.width / 2;
                    const slotCenterY = slotRect.top + slotRect.height / 2;

                    if (Math.abs(elementoCenterX - slotCenterX) > 50 || 
                        Math.abs(elementoCenterY - slotCenterY) > 50) {
                        allInPlace = false;
                    }

                    // Verificar orden
                    if (order !== index + 1) {
                        correctOrder = false;
                    }
                });

                if (allInPlace && correctOrder) {
                    const container = document.querySelector('.textos-container');
                    if (container) {
                        const fraseCompleta = textos.map(t => t.texto).join(' ');
                        container.innerHTML = `
                            <a href="/info" 
                               class="${buttonClasses} absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-center max-w-[90%] md:max-w-[80%] lg:max-w-[70%]">
                                ${fraseCompleta}
                            </a>
                        `;
                    }
                }
            }
        };
    </script>
</Layout> 