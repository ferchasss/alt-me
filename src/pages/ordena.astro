---
import Layout from '../layouts/Layout.astro';
import sombras from '../assets/sombras.jpg'; // Importar la imagen de fondo

// Aquí puedes cambiar los textos que quieres mostrar
const textos = [
    { texto: "En lo profundo...", orden: 1 },
    { texto: "no hay sombra", orden: 2 },
    { texto: "hay semilla", orden: 3 }
];

// Textos para los elementos flotantes aleatorios (puedes cambiarlos)
const floatingTexts = [
    "memoria que contengo",
    "eco que respira",
    "raíz mantenida dentro",
    "susurro que grita",
    "latido resonando",
    "silencio que otorga",
    "huella que permanece",
    "pulso que da vida"
];

// Clases comunes para los elementos
const baseClasses = "texto-elemento text-[#CCFF00] cursor-grab text-xl md:text-2xl lg:text-3xl font-medium tracking-wide absolute select-none font-sans transition-all duration-300";
const buttonClasses = "bg-[#CCFF00] text-black px-8 py-4 rounded-lg cursor-pointer text-xl md:text-2xl lg:text-3xl font-light tracking-wide hover:bg-[#b3e600] hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl font-sans";
const indicatorClasses = "border-2 border-[#CCFF00] border-dashed rounded-lg absolute transition-all duration-300";
---

<Layout title="Ordena">
    <section class="w-full h-screen relative overflow-hidden font-sans">
        <img src={sombras.src} alt="background image" class="absolute inset-0 w-full h-full object-cover z-0" />
        
        <!-- Contenedor para textos flotantes -->
        <div id="floating-texts-container" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1; pointer-events: none;"></div>

        <div class="textos-container font-sans relative w-full h-full z-10">
            <!-- Indicadores de posición -->
            <div id="indicadores" class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex flex-col gap-16 font-sans w-[400px] z-20">
                {textos.map((_, index) => (
                    <div 
                        class={`${indicatorClasses} w-full h-[100px] flex items-center justify-center`}
                        data-slot={index + 1}>
                    </div>
                ))}
            </div>
            {textos.map((item) => (
                <div 
                    class={baseClasses}
                    draggable="true"
                    data-order={item.orden}>
                    {item.texto}
                </div>
            ))}
        </div>
    </section>

    <style>
        /* Estilo básico para los textos flotantes */
        .floating-text {
            position: absolute;
            color: rgba(204, 255, 0, 0.1); /* Verde lima con baja opacidad */
            font-weight: light;
            pointer-events: none; /* Ignorar eventos del ratón */
            white-space: nowrap; /* Evitar que el texto se rompa en varias líneas */
        }

        /* Asegurar que el contenedor tenga suficiente espacio */
        .textos-container {
            min-height: 600px;
            padding: 2rem;
        }

        /* Ajustar el tamaño de los textos para que quepan en las ranuras */
        .texto-elemento {
            max-width: 350px;
            text-align: center;
            padding: 1rem;
        }

        /* Aquí añadiremos la animación CSS más adelante */
        @keyframes float {
            0% { transform: translate(var(--initial-translate-x), var(--initial-translate-y)) translate(0, 0); opacity: 0.5; }
            50% { transform: translate(var(--initial-translate-x), var(--initial-translate-y)) translate(calc(var(--random-x) * 5vw), calc(var(--random-y) * 5vh)); opacity: 0.8; }
            100% { transform: translate(var(--initial-translate-x), var(--initial-translate-y)) translate(0, 0); opacity: 0.5; }
        }

    </style>

    <script define:vars={{ buttonClasses, textos, floatingTexts }}>
        window.onload = function() {
            // Posicionar elementos aleatoriamente al inicio
            const elementos = document.querySelectorAll('.texto-elemento');
            elementos.forEach(elemento => {
                const x = Math.random() * (window.innerWidth - 200);
                const y = Math.random() * (window.innerHeight - 100);
                elemento.style.left = `${x}px`;
                elemento.style.top = `${y}px`;
            });

            let draggedItem = null;

            elementos.forEach(texto => {
                texto.addEventListener('mousedown', () => {
                    texto.style.cursor = 'grabbing';
                });

                texto.addEventListener('mouseup', () => {
                    texto.style.cursor = 'grab';
                });

                texto.addEventListener('mouseleave', () => {
                    texto.style.cursor = 'grab';
                });

                texto.addEventListener('dragstart', () => {
                    draggedItem = texto;
                    texto.classList.add('scale-110', 'opacity-50', 'z-50');
                    texto.style.cursor = 'grabbing';
                });

                texto.addEventListener('dragend', () => {
                    texto.classList.remove('scale-110', 'opacity-50', 'z-50');
                    texto.style.cursor = 'grab';

                    // Obtener el orden del elemento
                    const order = parseInt(texto.getAttribute('data-order'));
                    
                    // Obtener el rectángulo correspondiente
                    const slot = document.querySelector(`[data-slot="${order}"]`);
                    const container = document.querySelector('.textos-container');
                    if (slot && container) {
                        const slotRect = slot.getBoundingClientRect();
                        const textoRect = texto.getBoundingClientRect();
                        const containerRect = container.getBoundingClientRect();
                        
                        // Calcular la posición para centrar el texto en la ranura
                        const targetLeft = slotRect.left - containerRect.left;
                        const targetTop = slotRect.top - containerRect.top;
                        
                        // Aplicar la posición con una transición suave
                        texto.style.transition = 'all 0.3s ease-out';
                        texto.style.left = `${targetLeft}px`;
                        texto.style.top = `${targetTop}px`;
                        
                        console.log(`Elemento ${order} posicionado en:`, {
                            left: targetLeft,
                            top: targetTop,
                            slotLeft: slotRect.left,
                            slotTop: slotRect.top,
                            containerLeft: containerRect.left,
                            containerTop: containerRect.top
                        });
                    }
                    
                    draggedItem = null;
                    console.log('Drag ended. Checking order...');
                    // Aumentar el tiempo de espera para dar tiempo a la transición
                    setTimeout(() => {
                        checkOrder();
                    }, 300);
                });
            });

            function checkOrder() {
                console.log('=== INICIANDO VERIFICACIÓN DE POSICIONES ===');
                const slots = document.querySelectorAll('[data-slot]');
                const container = document.querySelector('.textos-container');
                console.log('Número de ranuras encontradas:', slots.length);
                let allInPlace = true;

                elementos.forEach((elemento, index) => {
                    console.log(`\nVerificando Elemento ${index + 1}:`);
                    
                    const elementoRect = elemento.getBoundingClientRect();
                    let isInsideAnySlot = false;

                    // Verificar si el elemento está dentro de cualquier ranura
                    slots.forEach((slot, slotIndex) => {
                        const slotRect = slot.getBoundingClientRect();
                        const tolerance = 20; // 20px de tolerancia

                        const isInside = 
                            elementoRect.left >= (slotRect.left - tolerance) &&
                            elementoRect.right <= (slotRect.right + tolerance) &&
                            elementoRect.top >= (slotRect.top - tolerance) &&
                            elementoRect.bottom <= (slotRect.bottom + tolerance);

                        if (isInside) {
                            isInsideAnySlot = true;
                            console.log(`  ✅ Elemento está dentro de la ranura ${slotIndex + 1}`);
                        }
                    });

                    if (!isInsideAnySlot) {
                        allInPlace = false;
                        console.log(`  ❌ Elemento no está dentro de ninguna ranura`);
                    }
                });

                console.log('\n=== RESULTADO FINAL ===');
                console.log(`¿Todos los elementos están dentro de alguna ranura? ${allInPlace ? '✅' : '❌'}`);

                if (allInPlace) {
                    console.log('\n=== CREANDO BOTÓN ===');
                    console.log('¿Contenedor encontrado?', !!container);
                    
                    if (container) {
                        try {
                            console.log('HTML antes de crear el botón:', container.innerHTML);
                            const fraseCompleta = textos.map(t => t.texto).join(' ');
                            console.log('Frase completa:', fraseCompleta);
                            
                            // Limpiar el contenedor antes de añadir el botón
                            container.innerHTML = '';
                            console.log('Contenedor limpiado');
                            
                            // Crear el botón y añadirlo al contenedor limpio
                            const button = document.createElement('a');
                            button.href = '/elige';
                            button.className = `${buttonClasses} hover:font-bold absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-center max-w-[90%] md:max-w-[80%] lg:max-w-[70%] z-30`;
                            button.textContent = fraseCompleta;
                            container.appendChild(button);
                            console.log('Botón añadido al contenedor');
                            console.log('HTML después de crear el botón:', container.innerHTML);
                        } catch (error) {
                            console.error('Error al crear el botón:', error);
                        }
                    } else {
                        console.error('❌ No se encontró el contenedor para crear el botón');
                    }
                }
            }

            // Lógica para textos flotantes
            const floatingTextsContainer = document.getElementById('floating-texts-container');

            if (floatingTextsContainer) {
                function createFloatingText() {
                    const text = floatingTexts[Math.floor(Math.random() * floatingTexts.length)];
                    const div = document.createElement('div');
                    div.classList.add('floating-text', 'text-xl', 'md:text-2xl', 'lg:text-3xl');
                    div.textContent = text;
                    
                    // Calcular posición inicial aleatoria en vw/vh
                    const initialTranslateX = Math.random() * 100; // Porcentaje aleatorio entre 0 y 100
                    const initialTranslateY = Math.random() * 100; // Porcentaje aleatorio entre 0 y 100
                    
                    // Establecer variables CSS para la posición inicial y la animación
                    div.style.position = 'absolute'; // Asegurar posicionamiento absoluto dentro del contenedor fixed
                    div.style.left = '0'; // Base para la traslación
                    div.style.top = '0'; // Base para la traslación
                    
                    // Establecer variables CSS para la animación
                    div.style.setProperty('--initial-translate-x', `${initialTranslateX}vw`); // Posición inicial X en vw
                    div.style.setProperty('--initial-translate-y', `${initialTranslateY}vh`); // Posición inicial Y en vh
                    div.style.setProperty('--random-x', (Math.random() - 0.5) * 2); // Valor entre -1 y 1 para dirección flotación
                    div.style.setProperty('--random-y', (Math.random() - 0.5) * 2); // Valor entre -1 y 1 para dirección flotación
                    
                    // Aplicar animación
                    div.style.animation = `float ${Math.random() * 10 + 5}s infinite ease-in-out alternate`; // Duración y retraso aleatorios

                    floatingTextsContainer.appendChild(div);
                }

                // Crear varios textos flotantes
                const numberOfFloatingTexts = 20; // Puedes ajustar cuántos quieres
                for (let i = 0; i < numberOfFloatingTexts; i++) {
                    createFloatingText();
                }
            }

        };
    </script>
</Layout> 